-- File auto generated by purescript-bridge! --
module Wallet.Emulator.Chain where

import Prelude

import Control.Lazy (defer)
import Data.Argonaut (encodeJson, jsonNull)
import Data.Argonaut.Decode (class DecodeJson)
import Data.Argonaut.Decode.Aeson ((</$\>), (</*\>), (</\>))
import Data.Argonaut.Encode (class EncodeJson)
import Data.Argonaut.Encode.Aeson ((>$<), (>/\<))
import Data.Generic.Rep (class Generic)
import Data.Lens (Iso', Lens', Prism', iso, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (unwrap)
import Data.RawJson (RawJson)
import Data.Show.Generic (genericShow)
import Data.These (These)
import Data.Tuple.Nested ((/\))
import Ledger.Index (ScriptValidationEvent, ValidationError, ValidationPhase)
import Plutus.V1.Ledger.Slot (Slot)
import Plutus.V1.Ledger.Tx (Tx)
import Plutus.V1.Ledger.TxId (TxId)
import Plutus.V1.Ledger.Value (Value)
import Type.Proxy (Proxy(Proxy))
import Data.Argonaut.Decode.Aeson as D
import Data.Argonaut.Encode.Aeson as E
import Data.Map as Map

data ChainEvent
  = TxnValidate TxId (These Tx RawJson) (Array ScriptValidationEvent)
  | TxnValidationFail ValidationPhase TxId (These Tx RawJson) ValidationError (Array ScriptValidationEvent) Value
  | SlotAdd Slot

instance Show ChainEvent where
  show a = genericShow a

instance EncodeJson ChainEvent where
  encodeJson = defer \_ -> case _ of
    TxnValidate a b c -> E.encodeTagged "TxnValidate" (a /\ b /\ c) (E.tuple (E.value >/\< E.value >/\< E.value))
    TxnValidationFail a b c d e f -> E.encodeTagged "TxnValidationFail" (a /\ b /\ c /\ d /\ e /\ f) (E.tuple (E.value >/\< E.value >/\< E.value >/\< E.value >/\< E.value >/\< E.value))
    SlotAdd a -> E.encodeTagged "SlotAdd" a E.value

instance DecodeJson ChainEvent where
  decodeJson = defer \_ -> D.decode
    $ D.sumType "ChainEvent"
    $ Map.fromFoldable
        [ "TxnValidate" /\ D.content (D.tuple $ TxnValidate </$\> D.value </*\> D.value </*\> D.value)
        , "TxnValidationFail" /\ D.content (D.tuple $ TxnValidationFail </$\> D.value </*\> D.value </*\> D.value </*\> D.value </*\> D.value </*\> D.value)
        , "SlotAdd" /\ D.content (SlotAdd <$> D.value)
        ]

derive instance Generic ChainEvent _

--------------------------------------------------------------------------------

_TxnValidate :: Prism' ChainEvent { a :: TxId, b :: These Tx RawJson, c :: Array ScriptValidationEvent }
_TxnValidate = prism' (\{ a, b, c } -> (TxnValidate a b c)) case _ of
  (TxnValidate a b c) -> Just { a, b, c }
  _ -> Nothing

_TxnValidationFail :: Prism' ChainEvent { a :: ValidationPhase, b :: TxId, c :: These Tx RawJson, d :: ValidationError, e :: Array ScriptValidationEvent, f :: Value }
_TxnValidationFail = prism' (\{ a, b, c, d, e, f } -> (TxnValidationFail a b c d e f)) case _ of
  (TxnValidationFail a b c d e f) -> Just { a, b, c, d, e, f }
  _ -> Nothing

_SlotAdd :: Prism' ChainEvent Slot
_SlotAdd = prism' SlotAdd case _ of
  (SlotAdd a) -> Just a
  _ -> Nothing
